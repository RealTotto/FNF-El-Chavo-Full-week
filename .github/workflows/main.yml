# This is a basic workflow to help you get started with Actions

name: Release (Windows)

# Controls when the action will run. 
on: 
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildWindows:
    runs-on: windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.2.0
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp > nul
          haxelib install lime
          haxelib install openfl
          haxelib --never install flixel
          haxelib run lime setup flixel
          haxelib run lime setup
          haxelib install flixel-tools
          haxelib install flixel-ui
          haxelib install flixel-addons
          haxelib install tjson
          haxelib install hxjsonast
          haxelib git linc_luajit https://github.com/AndreiRudenko/linc_luajit
          haxelib install hscript 
          haxelib git hscript-ex https://github.com/ianharrigan/hscript-ex
          haxelib git discord_rpc https://github.com/Aidan63/linc_discord-rpc
          haxelib install hxcpp-debug-server
          haxelib list
        shell: cmd
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build windows --app-version="4.0.0-${{ github.run_id}}"
      - name: Create release ZIP
        uses: vimtor/action-zip@v1
        with:
          files: export/release/windows/bin
          dest: release-win.zip
      - name: Get Commit Hash
        run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.SHORT_SHA }}
          release_name: Release ${{ env.SHORT_SHA }} (Windows)
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-win.zip
          asset_name: release-win.zip
          asset_content_type: application/zip